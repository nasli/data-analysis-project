aggregate(varObjCont, by=list(discCont$disc_ServiciosPtge), mean)
discCont$disc_ServiciosPtge <- car::recode(discCont$disc_ServiciosPtge, "c('(9.59,11.5]','(11.5,11.8]','(11.8,14.5]', '(14.5,71.7]')='(9.59,71.7]'")
apply(discCont,2,freq)$disc_Inmuebles
aggregate(varObjCont, by=list(discCont$disc_Inmuebles), mean)
discCont$disc_Inmuebles <- car::recode(discCont$disc_Inmuebles, "c('(2.16e+03,3.38e+03]','(3.38e+03,4.62e+03]')='(2.16e+03,4.62e+03]'")
apply(discCont,2,freq)$disc_Superficie
aggregate(varObjCont, by=list(discCont$disc_Superficie), mean)
discCont$disc_Superficie <- car::recode(discCont$disc_Superficie, "c('(42.6,55.3]','(55.3,60.5]')='(42.6,60.5]'")
apply(discCont,2,freq)$disc_Densidad
aggregate(varObjCont, by=list(discCont$disc_Densidad), mean)
discCont$disc_Densidad <- car::recode(discCont$disc_Densidad,
"c('(130,132]','(132,246]')='(130,246]'")
apply(discCont,2,freq)$disc_PobChange_pct
aggregate(varObjCont, by=list(discCont$disc_PobChange_pct), mean)
discCont$disc_PobChange_pct <- car::recode(discCont$disc_PobChange_pct, "c('(-4.77,-4.72]','(-5.81,-5.67]', '(-5.67,-4.77]')='(-5.81,-4.72]'")
apply(discCont,2,freq)$disc_PersonasInmueble
aggregate(varObjCont, by=list(discCont$disc_PersonasInmueble), mean)
discCont$disc_PersonasInmueble <- car::recode(discCont$disc_PersonasInmueble, "c('(1.19,1.31]','(1.31,1.32]')='(1.19,1.32]'")
apply(discCont,2,freq)$disc_Explotaciones
aggregate(varObjCont, by=list(discCont$disc_Explotaciones), mean)
discCont$disc_Explotaciones <- car::recode(discCont$disc_Explotaciones, "c('(-3.76,88]','(88,165]')='(-3.76,165]'")
apply(discCont,2,freq)$disc_UnemploymentPtge
aggregate(varObjCont, by=list(discCont$disc_UnemploymentPtge), mean)
apply(discCont,2,freq)$disc_WomenUnemploymentPtge
aggregate(varObjCont, by=list(discCont$disc_WomenUnemploymentPtge), mean)
apply(discCont,2,freq)$disc_UnemployLess25_Ptge
aggregate(varObjCont, by=list(discCont$disc_UnemployLess25_Ptge), mean)
apply(discCont,2,freq)$disc_UnemployMore40_Ptge
aggregate(varObjCont, by=list(discCont$disc_UnemployMore40_Ptge), mean)
discCont$disc_UnemployMore40_Ptge <- car::recode(discCont$disc_UnemployMore40_Ptge, "c('(51.8,52.4]','(52.4,53.9]')='(51.8,53.9]'")
apply(discCont,2,freq)$disc_AgricultureUnemploymentPtge
aggregate(varObjCont, by=list(discCont$disc_AgricultureUnemploymentPtge), mean)
apply(discCont,2,freq)$disc_IndustryUnemploymentPtge
aggregate(varObjCont, by=list(discCont$disc_IndustryUnemploymentPtge), mean)
apply(discCont,2,freq)$disc_ConstructionUnemploymentPtge
aggregate(varObjCont, by=list(discCont$disc_ConstructionUnemploymentPtge), mean)
discCont$disc_ConstructionUnemploymentPtge <- car::recode(discCont$disc_ConstructionUnemploymentPtge, "c('(6.44,6.76]','(6.76,7.97]')='(6.44,7.97]'")
apply(discCont,2,freq)$disc_ServicesUnemploymentPtge
aggregate(varObjCont, by=list(discCont$disc_ServicesUnemploymentPtge), mean)
discCont$disc_ServicesUnemploymentPtge <- car::recode(discCont$disc_ServicesUnemploymentPtge, "c('(61.6,62.3]','(62.3,62.4]','(62.4,64.8]')='(61.6,64.8]'")
apply(discCont,2,freq)$disc_AutonomosPtge
aggregate(varObjCont, by=list(discCont$disc_AutonomosPtge), mean)
datos_todocont<-data.frame(varObjCont,input,discCont,TransfCont)
#Hago la partición
set.seed(12345)
trainIndex <- createDataPartition(datos_todocont$varObjCont, p=0.8, list=FALSE)
data_train <- datos_todocont[trainIndex,]
data_test <- datos_todocont[-trainIndex,]
fullInt<-lm(varObjCont~.^2, data=data_train[,-c(2,18,28)])
null<-lm(varObjCont~1,data=data_train) #Modelo mnimo
full<-lm(varObjCont~.,data=data_train) #Modelo maximo
fullT<-lm(varObjCont~., data=data_train[,c(1:21)])
modelo<-step(null, scope=list(lower=null, upper=full), direction="both",k=log(nrow(data_train)) )
summary(modelo)
modelos<-list(modelo)
sapply(modelos,function(x) x$rank)
sapply(modelos,function(x) Rsq(x,"varObjCont",data_test))
sapply(modelos,function(x) Rsq(x,"varObjCont",data_train))
total<-c()
formulaModelos<-sapply(modelos,formula)
for (i in 1:length(modelos)){
set.seed(1712)
vcr<-train(as.formula(formulaModelos[[i]]), data = data_train,
method = "lm",
trControl = trainControl(method="repeatedcv", number=5, repeats=20,
returnResamp="all")   )
total<-rbind(total,cbind(vcr$resample[,1:2],modelo=rep(paste("Modelo", ifelse(i<10,paste0("0",i),i)),nrow(vcr$resample))))
}
modelos<-list(modelo)
sapply(modelos,function(x) x$rank)
sapply(modelos,function(x) Rsq(x,"varObjCont",data_test))
sapply(modelos,function(x) Rsq(x,"varObjCont",data_train))
total<-c()
formulaModelos<-sapply(modelos,formula)
for (i in 1:length(modelos)){
set.seed(1712)
vcr<-train(as.formula(formulaModelos[[i]]), data = data_train,
method = "lm",
trControl = trainControl(method="repeatedcv", number=5, repeats=20,
returnResamp="all")   )
total<-rbind(total,cbind(vcr$resample[,1:2],modelo=rep(paste("Modelo", ifelse(i<10,paste0("0",i),i)),nrow(vcr$resample))))
}
total
total
total$RMSE %>% plot()
varObjCont %>% plot()
varObjCont %>% sort() %>% plot()
total$RMSE %>% plot()
varObjCont %>% sort() %>% plot()
modelo$fitted.values
modelo$fitted.values %>% plot()
varObjCont %>% plot()
modelo$fitted.values %>% plot()
varObjCont %>% plot() +
modelo$fitted.values %>% plot()
modelo1$fitted.values %>% plot()
modelo1$fitted.values %>% plot()
modelo$fitted.values %>% plot()
load("C:/Users/Tatiana/Downloads/Documentación minería de datos y modelización predictiva - Aida Calviño-20210615/modelos_regresion.RData")
knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_chunk$set(fig.width=6, fig.height=4)
# Cargo las funciones que voy a utilizar después
source("FuncionesMineriaAida.R") #no pongo la ruta porque está en el mismo directorio
# Cargo las librerias que me van a hacer falta
library(kableExtra)
library(magrittr)
library(tidyr)
library(questionr)
library(psych)
library(car)
library(Hmisc)
library(readxl)
library(patchwork)
library(corrplot)
library(corrplot)
library(caret)
library(ggplot2)
library(questionr)
library(car)
library(gridExtra)
library(tidyr)
Rsq(modeloIntAIC, 'varObjCont', data_train[,1:33] )
Rsq(modeloIntAIC, 'varObjCont', data_test[,1:33] )
Rsq(modeloIntAIC, 'varObjCont', data_train[,1:33] )
Rsq(modeloIntAIC, 'varObjCont', data_test[,1:33] )
Rsq(modeloIntBIC, 'varObjCont', data_train[,1:33] )
Rsq(modeloIntBIC, 'varObjCont', data_test[,1:33] )
modeloIntAIC$rank
modeloIntBIC$rank
summary(modeloIntAIC)
modeloIntAIC$coefficients
modeloIntAIC$coefficients
summary(modeloIntAIC)
summary(modeloIntBIC)
summary(modeloIntBIC)
0.5432-0.4990
summary(modeloITBIC)
Rsq(modeloITAIC, 'varObjCont', data_train[,1:33] )
Rsq(modeloITAIC, 'varObjCont', data_test[,1:33] )
Rsq(modeloITBIC, 'varObjCont', data_train[,1:33] )
Rsq(modeloITBIC, 'varObjCont', data_test[,1:33] )
Rsq(modeloITAIC, 'varObjCont', data_train[,1:60] )
Rsq(modeloITAIC, 'varObjCont', data_test[,1:60] )
Rsq(modeloITBIC, 'varObjCont', data_train[,1:60] )
Rsq(modeloITBIC, 'varObjCont', data_test[,1:60] )
modeloIntAIC$rank
modeloIntBIC$rank
Rsq(modeloAllAIC, 'varObjCont', data_train[,1:60] )
Rsq(modeloAllAIC, 'varObjCont', data_train )
Rsq(modeloAllAIC, 'varObjCont', data_test )
Rsq(modeloAllBIC, 'varObjCont', data_train )
Rsq(modeloAllBIC, 'varObjCont', data_test )
modeloAllAIC$rank
modeloAllBIC$rank
summary(modeloAllBIC)
full<-lm(varObjCont~., data=data_train)
null<-lm(varObjCont~1,data=data_train) #Modelo mnimo
manual_for<-step(null, scope=list(lower=null, upper=full), direction="forward")
full<-lm(varObjCont~., data=data_train[,1:33])
null<-lm(varObjCont~1,data=data_train[,1:33]) #Modelo mnimo
manual_for<-step(null, scope=list(lower=null, upper=full), direction="forward")
manual_for<-step(null, scope=list(lower=null, upper=full), direction="forward")
manual_bar<-step(full, scope=list(lower=full, upper=null), direction="backward")
manual_bar$coefficients
manual_back<-step(full, scope=list(lower=full, upper=null), direction="backward")
modelos<-list(manual_for, manual_back, modelo_originalAIC, modelo_originalBIC, modelo_discAIC, modelo_discBIC, modelo_todoAIC,  modelo_todoBIC, modeloIntAIC, modeloIntBIC, modeloITBIC, modeloITAIC,  modeloAllAIC, modeloAllBIC)
sapply(modelos,function(x) x$rank)
sapply(modelos,function(x) Rsq(x,"varObjCont",data_test))
sapply(modelos,function(x) Rsq(x,"varObjCont",data_train))
total<-c()
formulaModelos<-sapply(modelos,formula)
for (i in 1:length(modelos)){
set.seed(1712)
vcr<-train(as.formula(formulaModelos[[i]]), data = data_train,
method = "lm",
trControl = trainControl(method="repeatedcv", number=5, repeats=20,
returnResamp="all")   )
total<-rbind(total,cbind(vcr$resample[,1:2],modelo=rep(paste("Modelo", ifelse(i<10,paste0("0",i),i)),nrow(vcr$resample))))
}
par(mar=c(5.1,5.1,6,2.1)) #ajusto el margen superior
boxplot(Rsquared~modelo,data=total,main="R-Square")
axis(3, at=1:length(modelos), labels=sapply(modelos,function(x) x$rank), cex.axis=1)
#Se descartan el 4 y el 5 por el número de parámetros
aggregate(Rsquared~modelo, data = total, function(x) c(mean(x),sd(x)))
par(mar=c(5.1,5.1,6,2.1)) #ajusto el margen superior
boxplot(Rsquared~modelo,data=total,main="R-Square")
axis(3, at=1:length(modelos), labels=sapply(modelos,function(x) x$rank), cex.axis=1)
aggregate(Rsquared~modelo, data = total, function(x) c(mean(x),sd(x)))
aggregate(Rsquared~modelo, data = total[total$modelo=='Modelo 14'], function(x) c(mean(x),sd(x)))
aggregate(Rsquared~modelo, data = total[total$modelo=='Modelo 14'], function(x) c(mean(x),sd(x)))
total[total$modelo=='Modelo 14']
total[total$modelo=='Modelo 14',]
aggregate(Rsquared~modelo, data = total[total$modelo=='Modelo 14',], function(x) c(mean(x),sd(x)))
boxplot(Rsquared~modelo,data=total[total$modelo=='Modelo 14',],main="R-Square")
skewness
library(e1071)
skewness(total)
skewness(total[total$modelo=='Modelo 14'])
skewness(total[total$modelo=='Modelo 14',])
total[total$modelo=='Modelo 14',]
total[total$modelo=='Modelo 14',]
total[total$modelo=='Modelo 14','Rsquared']
skewness(total[total$modelo=='Modelo 14','Rsquared'])
skewness(total[total$modelo=='Modelo 10','Rsquared'])
skewness(total[total$modelo=='Modelo 11','Rsquared'])
boxplot(Rsquared~modelo,data=total[total$modelo=='Modelo 14'|total$modelo=='Modelo 10'|total$modelo=='Modelo 11',],main="R-Square")
summary(modeloAllBIC)
summary(modeloIntBIC)
modeloIntBIC$coefficients
modeloAllBIC$coefficients
modeloIntBIC$coefficients
modeloAllBIC$coefficients
modeloAllBIC
modeloIntBIC$model
summary(modeloIntBIC)
summary(modeloAllBIC)
aggregate(Rsquared~modelo, data = total[total$modelo=='Modelo 14',], function(x) c(mean(x),sd(x)))
aggregate(Rsquared~modelo, data = total[total$modelo=='Modelo 10',], function(x) c(mean(x),sd(x)))
0.50909478 - 0.5083528
0.01568284-0.0160379
summary(modeloIntBIC)
modeloIntBIC$coefficients
modeloIntBIC$coefficients %>% round(2)
modeloIntBIC$coefficients %>% round(3)
summary(modeloIntBIC)
modeloIntBIC$coefficients %>% round(4)
modeloIntBIC$coefficients %>% round(5)
fullAll
fullAll$model
fullAll$effects
load("C:/Users/Tatiana/Downloads/Documentación minería de datos y modelización predictiva - Aida Calviño-20210615/modelos_logistica.RData")
predict(modelo_todoBIC, 0)
predict(modelo_todoBIC, c(0))
predict(modelo_todoBIC, rep_len(0))
len(modelo_todoBIC$coefficients)
length(modelo_todoBIC$coefficients)
predict(modelo_todoBIC, rep(0,16))
predict(modelo_todoBIC, list(rep(0,16)))
modelo_todoBIC$coefficients
exp(coef(modelo_todoBIC))
formula(modelo_todoBIC)
data_test
data_test[1,]
<- test_aux <- data_test[1,]
test_aux <- data_test[1,]
test_aux
predict(modelo_todoBIC, test_aux)
test_aux <- 0
predict(modelo_todoBIC, test_aux)
test_aux
test_aux <- data_test[1,]
teat %>% is.numeric()
library(magrittr)
teat %>% is.numeric()
test %>% is.numeric()
test_aux %>% is.numeric()
test_aux %>% stre
test_aux %>% str()
predict(modelo_todoBIC, test_aux)
test_aux[,test_aux %>% is.numeric()]
test_aux %>% mutate
test_aux
test_aux %>% str()
predict(modelo_todoBIC, test_aux)
test_aux$UnemploymentPtge
test_aux$UnemploymentPtge <- test_aux$UnemploymentPtge + 1
predict(modelo_todoBIC, test_aux)
test_aux$CCAA
test_aux$CCAA <- 3
predict(modelo_todoBIC, test_aux)
test_aux$CCAA <- as.factor(3)
predict(modelo_todoBIC, test_aux)
test_aux$CCAA <- as.factor(4)
predict(modelo_todoBIC, test_aux)
-1.21+0.46
-1.21+1.53
predict(modelo_todoBIC, test_aux)
1.214-0.28
exp(0.934)
exp(1.06)
predict(modelo_todoBIC, test_aux)
predict(modelo_todoBIC, test_aux)
test_aux$PartidoCCAA
test_aux$PartidoCCAA <- as.factor('PP')
predict(modelo_todoBIC, test_aux)
test_aux$PartidoCCAA <- as.factor('PSOE')
predict(modelo_todoBIC, test_aux)
test_aux$PartidoCCAA <- as.factor('Otro')
predict(modelo_todoBIC, test_aux)
test_aux$PartidoCCAA <- as.factor('PSOE')
predict(modelo_todoBIC, test_aux)
# Cargo las funciones que voy a utilizar después
source("FuncionesMineriaAida.R")
knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_chunk$set(fig.width=6, fig.height=4)
# Cargo las funciones que voy a utilizar después
source("FuncionesMineriaAida.R") #no pongo la ruta porque está en el mismo directorio
# Cargo las librerias que me van a hacer falta
library(kableExtra)
library(magrittr)
library(tidyr)
library(questionr)
library(psych)
library(car)
library(Hmisc)
library(readxl)
library(patchwork)
library(corrplot)
library(corrplot)
library(caret)
library(ggplot2)
library(questionr)
library(car)
library(gridExtra)
library(tidyr)
library(questionr)
library(pROC)
confusionMatrix(data_train)
sensEspCorte<-function(modelo,dd,nombreVar,ptoCorte,evento){
probs <-predict(modelo,newdata=dd,type="response")
cm<-confusionMatrix(data=factor(ifelse(probs>ptoCorte,1,0)),
reference=dd[,nombreVar],positive=evento)
c(cm$overall[1],cm$byClass[1:2])
}
sensEspCorte(modelo,data_test,"varObjBin",0.5,"1")
sensEspCorte(modelo,data_test,"varObjBin",puntoCorteYouden,"1")
sensEspCorte<-function(modelo,dd,nombreVar,ptoCorte,evento){
probs <-predict(modelo,newdata=dd,type="response")
cm<-confusionMatrix(data=factor(ifelse(probs>ptoCorte,1,0)),
reference=dd[,nombreVar],positive=evento)
c(cm$overall[1],cm$byClass[1:2])
}
sensEspCorte(modelo,data_test,"varObjBin",0.5,"1")
sensEspCorte(modelo,data_test,"varObjBin",0.47,"1")
confusionMatrix(data=factor(ifelse(probs>ptoCorte,1,0)),
reference=dd[,"varObjBin"],positive='1')
confusionMatrix(data=factor(ifelse(probs>ptoCorte,1,0)),       reference=dd[,"varObjBin"],positive='1')
ModelMetrics::confusionMatrix(data_train$varObjBin, predict(data_train[,-1]))
ModelMetrics::confusionMatrix(data_train$varObjBin, predict(modelo_todoBIC,data_train[,-1]))
ModelMetrics::confusionMatrix(data_train$varObjBin, predict(modelo_todoBIC,data_train[,-1]), 0.47)
predict(modelo_todoBIC,data_train[,-1])
ModelMetrics::confusionMatrix(data_train$varObjBin, predict(modelo_todoBIC,data_train[,-1], 'response'), 0.47)
ModelMetrics::confusionMatrix(data_train$varObjBin,  predict(modelo_todoBIC,data_test,type = "response"), 0.47)
predict(modelo_todoBIC,data_test,type = "response")
ModelMetrics::confusionMatrix(data_test$varObjBin,  predict(modelo_todoBIC,data_test,type = "response"), 0.47)
ModelMetrics::confusionMatrix(data_test$varObjBin,  predict(modelo_todoBIC,data_test,type = "response"))
roc(data_test$varObjBin, predict(modeloStepBIC_transf,data_test,type = "response"), direction="<")
predict(modelo_todoBIC,data_test,type = "response")
sensEspCorte(modeloStepBIC_transf,data_train,"varObjBin",0.733,"1")
sapply(modelos,function(x) roc(data_test$varObjBin, predict(x,data_test,type = "response"), direction="<")$auc)
sapply(modelos,function(x) x$rank)
#Parece que el mejor es modeloStepBIC_tran
sapply(modelos,function(x) roc(data_test$varObjBin, predict(x,data_test,type = "response"), direction="<")$auc)
sapply(modelos,function(x) x$rank)
caret::confusionMatrix(data_train$varObjBin, predict(data_train[,-1], 'response') )
caret::confusionMatrix(data_train$varObjBin, predict(, modelo_todoBIC, data_train[,-1], 'response') )
caret::confusionMatrix(data_train$varObjBin, predict( modelo_todoBIC, data_train[,-1], 'response') )
probs <-predict(modelo_todoBIC,newdata=data_train,type="response")
cm<-confusionMatrix(data=factor(ifelse(probs>ptoCorte,1,0)),
reference=dd[,'varObjBin'],positive='1')
probs <-predict(modelo_todoBIC,newdata=data_train,type="response")
cm<-confusionMatrix(data=factor(ifelse(probs>0.47,1,0)),
reference=dd[,'varObjBin'],positive='1')
probs <-predict(modelo_todoBIC,newdata=data_train,type="response")
cm<-confusionMatrix(data=factor(ifelse(probs>0.47,1,0)),
reference=data_train[,'varObjBin'],positive='1')
cm
probs <-predict(modelo_todoBIC,newdata=data_test,type="response")
cm<-confusionMatrix(data=factor(ifelse(probs>0.47,1,0)),
reference=data_test[,'varObjBin'],positive='1')
cm
#Evaluamos todos también con la curva ROC
sapply(modelos,function(x) roc(data_test$varObjBin, predict(x,data_test,type = "response"), direction="<")$auc)
#Evaluamos todos también con la curva ROC
sapply(modelos,function(x) roc(data_test$varObjBin, predict(x,data_test,type = "response"), direction="<")$auc)
#Evaluamos todos también con la curva ROC
sapply(modelos,function(x) roc(data_test$varObjBin, predict(x,data_test,type = "response"), direction="<")$auc)
UNI <-  read.csv('../Downloads/UNI.csv')
LTC <-  read.csv('../Downloads/LTC.csv')
BTC <-  read.csv('../Downloads/BTC.csv')
library(magrittr)
library(caret)
UNI <-  read.csv('../Downloads/UNI.csv')
LTC <-  read.csv('../Downloads/LTC.csv')
BTC <-  read.csv('../Downloads/BTC.csv')
UNI %>% dim()
LTC %>% dim()
BTC %>% dim()
UNI_BTC <- merge(UNI, BTC, by='unix', suffixes = c("_UNI","_BTC") )# %>% na.omit()
LTC_BTC <- merge(LTC, BTC, by='unix', suffixes = c("_LTC","_BTC") )# %>% na.omit()
## Este es un heartmap interactivo basado en javascript
## https://github.com/talgalili/d3heatmap
d3heatmap::d3heatmap(cor(UNI_BTC[c('close_UNI','close_BTC', 'Volume.BTC',
'Volume.UNI', 'tradecount_BTC', 'tradecount_UNI',
'Volume.USDT_BTC', 'Volume.USDT_UNI')]), dendrogram = 'none')
d3heatmap::d3heatmap(cor(LTC_BTC[c('close_LTC','close_BTC', 'Volume.BTC',
'Volume.LTC', 'tradecount_BTC', 'tradecount_LTC',
'Volume.USDT_BTC', 'Volume.USDT_LTC')]), dendrogram = 'none')
set.seed(12345)
trainIndex1 <- createDataPartition(UNI_BTC$close_UNI, p=0.8, list=FALSE)
data_train1 <- UNI_BTC[trainIndex1,]
data_test1 <- UNI_BTC[-trainIndex1,]
#Modelo para UNI
lm_UNI <- lm(close_UNI~close_BTC,data = data_train1)
caret::R2(predict.lm(lm_LTC, data_train1['close_BTC']), data_train1$close_UNI)
caret::R2(predict.lm(lm_UNI, data_test1['close_BTC']), data_test1$close_UNI)
summary(lm_UNI)
set.seed(12345)
trainIndex <- createDataPartition(LTC_BTC$close_LTC, p=0.8, list=FALSE)
data_train <- LTC_BTC[trainIndex,]
data_test <- LTC_BTC[-trainIndex,]
#Modelo para LTC
lm_LTC <- lm(close_LTC~close_BTC,data = data_train)
caret::R2(predict.lm(lm_LTC, data_train['close_BTC']), data_train$close_LTC)
caret::R2(predict.lm(lm_LTC, data_test['close_BTC']), data_test$close_LTC)
summary(lm_LTC)
library(ggplot2)
plot(predict.lm(lm_UNI, UNI_BTC['close_BTC']),  type = "l", frame = F, pch = 10,
col = "red", ylab = "close_UNI")
lines( UNI_BTC['close_UNI'],  pch = 10, col = "blue", type = "l", lty = 2)
plot(predict.lm(lm_LTC, LTC_BTC['close_BTC']),  type = "l", frame = F, pch = 10,
col = "red",  ylab = "close_LTC")
lines( LTC_BTC['close_LTC'],  pch = 10, col = "blue", type = "l", lty = 2)
library(magrittr)
library(caret)
UNI <-  read.csv('../Downloads/UNI.csv')
LTC <-  read.csv('../Downloads/LTC.csv')
BTC <-  read.csv('../Downloads/BTC.csv')
UNI %>% dim()
LTC %>% dim()
BTC %>% dim()
UNI_BTC <- merge(UNI, BTC, by='unix', suffixes = c("_UNI","_BTC") )# %>% na.omit()
LTC_BTC <- merge(LTC, BTC, by='unix', suffixes = c("_LTC","_BTC") )# %>% na.omit()
## Este es un heartmap interactivo basado en javascript
## https://github.com/talgalili/d3heatmap
d3heatmap::d3heatmap(cor(UNI_BTC[c('close_UNI','close_BTC', 'Volume.BTC',
'Volume.UNI', 'tradecount_BTC', 'tradecount_UNI',
'Volume.USDT_BTC', 'Volume.USDT_UNI')]), dendrogram = 'none')
d3heatmap::d3heatmap(cor(LTC_BTC[c('close_LTC','close_BTC', 'Volume.BTC',
'Volume.LTC', 'tradecount_BTC', 'tradecount_LTC',
'Volume.USDT_BTC', 'Volume.USDT_LTC')]), dendrogram = 'none')
set.seed(12345)
trainIndex1 <- createDataPartition(UNI_BTC$close_UNI, p=0.8, list=FALSE)
data_train1 <- UNI_BTC[trainIndex1,]
data_test1 <- UNI_BTC[-trainIndex1,]
#Modelo para UNI
lm_UNI <- lm(close_UNI~close_BTC,data = data_train1)
caret::R2(predict.lm(lm_LTC, data_train1['close_BTC']), data_train1$close_UNI)
caret::R2(predict.lm(lm_UNI, data_test1['close_BTC']), data_test1$close_UNI)
summary(lm_UNI)
set.seed(12345)
trainIndex <- createDataPartition(LTC_BTC$close_LTC, p=0.8, list=FALSE)
data_train <- LTC_BTC[trainIndex,]
data_test <- LTC_BTC[-trainIndex,]
#Modelo para LTC
lm_LTC <- lm(close_LTC~close_BTC,data = data_train)
caret::R2(predict.lm(lm_LTC, data_train['close_BTC']), data_train$close_LTC)
caret::R2(predict.lm(lm_LTC, data_test['close_BTC']), data_test$close_LTC)
summary(lm_LTC)
library(ggplot2)
plot(predict.lm(lm_UNI, UNI_BTC['close_BTC']),  type = "l", frame = F, pch = 10,
col = "red", ylab = "close_UNI")
lines( UNI_BTC['close_UNI'],  pch = 10, col = "blue", type = "l", lty = 2)
plot(predict.lm(lm_LTC, LTC_BTC['close_BTC']),  type = "l", frame = F, pch = 10,
col = "red",  ylab = "close_LTC")
lines( LTC_BTC['close_LTC'],  pch = 10, col = "blue", type = "l", lty = 2)
getwd()
caret::R2(predict.lm(lm_LTC, data_train1['close_BTC']), data_train1$close_UNI)
caret::R2(predict.lm(lm_UNI, data_test1['close_BTC']), data_test1$close_UNI)
library(magrittr)
library(caret)
UNI <-  read.csv('../Downloads/UNI.csv')
LTC <-  read.csv('../Downloads/LTC.csv')
BTC <-  read.csv('../Downloads/BTC.csv')
UNI %>% dim()
LTC %>% dim()
BTC %>% dim()
UNI_BTC <- merge(UNI, BTC, by='unix', suffixes = c("_UNI","_BTC") )# %>% na.omit()
LTC_BTC <- merge(LTC, BTC, by='unix', suffixes = c("_LTC","_BTC") )# %>% na.omit()
## Este es un heartmap interactivo basado en javascript
## https://github.com/talgalili/d3heatmap
d3heatmap::d3heatmap(cor(UNI_BTC[c('close_UNI','close_BTC', 'Volume.BTC',
'Volume.UNI', 'tradecount_BTC', 'tradecount_UNI',
'Volume.USDT_BTC', 'Volume.USDT_UNI')]), dendrogram = 'none')
d3heatmap::d3heatmap(cor(LTC_BTC[c('close_LTC','close_BTC', 'Volume.BTC',
'Volume.LTC', 'tradecount_BTC', 'tradecount_LTC',
'Volume.USDT_BTC', 'Volume.USDT_LTC')]), dendrogram = 'none')
set.seed(12345)
trainIndex1 <- createDataPartition(UNI_BTC$close_UNI, p=0.8, list=FALSE)
data_train1 <- UNI_BTC[trainIndex1,]
data_test1 <- UNI_BTC[-trainIndex1,]
#Modelo para UNI
lm_UNI <- lm(close_UNI~close_BTC,data = data_train1)
caret::R2(predict.lm(lm_LTC, data_train1['close_BTC']), data_train1$close_UNI)
caret::R2(predict.lm(lm_UNI, data_test1['close_BTC']), data_test1$close_UNI)
summary(lm_UNI)
set.seed(12345)
trainIndex <- createDataPartition(LTC_BTC$close_LTC, p=0.8, list=FALSE)
data_train <- LTC_BTC[trainIndex,]
data_test <- LTC_BTC[-trainIndex,]
#Modelo para LTC
lm_LTC <- lm(close_LTC~close_BTC,data = data_train)
caret::R2(predict.lm(lm_LTC, data_train['close_BTC']), data_train$close_LTC)
caret::R2(predict.lm(lm_LTC, data_test['close_BTC']), data_test$close_LTC)
summary(lm_LTC)
library(ggplot2)
plot(predict.lm(lm_UNI, UNI_BTC['close_BTC']),  type = "l", frame = F, pch = 10,
col = "red", ylab = "close_UNI")
lines( UNI_BTC['close_UNI'],  pch = 10, col = "blue", type = "l", lty = 2)
plot(predict.lm(lm_LTC, LTC_BTC['close_BTC']),  type = "l", frame = F, pch = 10,
col = "red",  ylab = "close_LTC")
lines( LTC_BTC['close_LTC'],  pch = 10, col = "blue", type = "l", lty = 2)
